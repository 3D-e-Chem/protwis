from django.shortcuts import render
from django.conf import settings
from django.core.files import File

from common.views import AbsReferenceSelection
from common.views import AbsSegmentSelection
from common.views import AbsTargetSelection
import os
from phylogenetic_trees.PrepareTree import *
# from common.alignment_SITE_NAME import Alignment
Alignment = getattr(__import__('common.alignment_' + settings.SITE_NAME, fromlist=['Alignment']), 'Alignment')

from collections import OrderedDict
#TODO
class TreeSettings(AbsReferenceSelection):
    step = 3
    number_of_steps = 3
    docs = '/docs/phylogenetic_trees'
    selection_boxes = OrderedDict([
        ('settings', True),
        ('segments', True),
        ('targets', True),
    ])
    buttons = {
        'continue': {
            'label': 'Continue to next step',
            'url': '/similaritysearch/segmentselection',
            'color': 'success',
        },
   }

class SegmentSelection(AbsSegmentSelection):
    step = 2
    number_of_steps = 3
    docs = '/docs/phylogenetic_trees'
    selection_boxes = OrderedDict([
        ('reference', False),
        ('segments', True),
        ('targets', True),
    ])
    buttons = {
        'continue': {
            'label': 'Continue to next step',
            'url': '/phylogenetic_trees/render',
            'color': 'success',
        },
    }


class TargetSelection(AbsTargetSelection):
    step = 1
    number_of_steps = 3
    docs = '/docs/phylogenetic_trees'
    selection_boxes = OrderedDict([
        ('reference', False),
        ('segments', False),
        ('targets', True),
    ])
    buttons = {
        'continue': {
            'label': 'Continue to next step',
            'url': '/phylogenetic_trees/segmentselection',
            'color': 'success',
        },
    }

def render_tree(request):
    Tree = PrepareTree()
    # get the user selection from session
    a=Alignment()
    simple_selection=request.session.get('selection', False)
    print(simple_selection)
    a.load_proteins_from_selection(simple_selection)
    a.load_segments_from_selection(simple_selection)    
    # create an alignment object
    #TODO Write sequences to file
#    if os.getcwd() == '/vagrant/protwis'
 #   print(os.getcwd())
    os.chdir('/vagrant/protwis/phylogenetic_trees/')
    print(os.getcwd())
    ####Run bootstrap
    bootstrap = 0 #TODO
    if bootstrap:
    ### Write phylip input options
        inp = open('temp','w')
        inp.write('\n'.join(['r',str(bootstrap),'y','77','y'])+'\n')
        inp.close()
    ###
        os.system('phylip seqboot<temp')
        os.rename('infile', 'sequence')
        os.rename('outfile', 'bootstrap_outfile')
        os.system('cp bootstrap_outfile infile')
    ### Write phylip input options
    
    inp = open('temp','w')
    if bootstrap:
        inp.write('\n'.join(['m','d',str(bootstrap),'y'])+'\n')
    else:
        inp.write('y\n')
    inp.close()
    ###
    os.system('phylip protdist<temp')
    os.remove('infile')
    os.rename('outfile', 'protdist_out')
    os.system('cp protdist_out infile')
    if bootstrap:
    ### Write phylip input options
        inp = open('temp','w')
        inp.write('\n'.join(['m',str(bootstrap),'111','y'])+'\n')
        inp.close()
    else:
        inp = open('temp','w')
        inp.write('y\n')
        inp.close()
    ###
    
    os.system('phylip neighbor<temp')
    os.remove('infile')
    os.rename('outfile', 'neighbor_out')
    os.system('cp neighbor_out infile')
    if bootstrap:
        os.rename('outtree', 'intree')
    ### Write phylip input options
        inp = open('temp','w')
        inp.write('y\n')
        inp.close()
    ###
        os.system('phylip consense<temp')
    branches = 'Regular'
    ttype = 'circular'
    ###TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    #family = {}
    #for n in selected_proteins:
    #    family[acc] = {'name':name,'family':fam,'description':desc,'species':spec,'class':'','ligand':'','type':''}
    family = Tree.parseFamily(open('familyfile','r').read())
    #print(family)
    #Tree = PrepareTree()
    Tree.treeDo('outtree',branches,family)
    #os.remove('raw.xml')
    #os.remove('rong')
    phylogeny_input = open('out.xml','r').read().replace('\n','')
    print('dupa',phylogeny_input)
#    phylogeny_input = ''.join(open('out.xml','r').readlines())    
#    os.system('adsfadf')
#    w = a.proteins
#    print(w)
#    f = open('/vagrant/protwis/phylogenetic_trees/tmp','w')
#    n = File(f)
#    n.write(w)
#    n.close()
    

    return render(request, 'phylogenetic_trees/alignment.html', {'phylo': phylogeny_input, 'branch':branches, 'ttype': ttype, 'count':26 })
